<?xml version="1.0" encoding="UTF-8"?>
<SPC5-Patch version="1.0.0">
  <!--It is your patch repository, do not break your XML File.-->
  <files>
    <file componentId="com.st.spc5.components.clock.spc570sxx_rla" version="1.1.0.201903190945" path="component/lib/src/clock.c" user="false">
      <diff><![CDATA[--- components/spc570sxx_clock_component_rla/lib/src/clock.c
+++ components/spc570sxx_clock_component_rla/lib/src/clock.c
@@ -117,6 +117,11 @@
   SWT_0.CR.R = 0xFF000002UL;
 #endif
 
+#ifdef SPC5_SSCM_ERROR_INIT		/* modified by Felix for debugging */
+#undef SPC5_SSCM_ERROR_INIT
+#define SPC5_SSCM_ERROR_INIT                (SPC5_SSCM_ERROR_PAE)
+#endif
+
   /* SSCM initialization from configuration data.*/
   SSCM.ERROR.R = (uint16_t)SPC5_SSCM_ERROR_INIT;
 
@@ -217,6 +222,17 @@
   MC_ME.LP_PC[6].R  = SPC5_ME_LP_PC6_BITS;
   MC_ME.LP_PC[7].R  = SPC5_ME_LP_PC7_BITS;
 
+  /* added by Felix */
+	MC_ME.PCTL[SPC5_FLEXCAN0_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[SPC5_FLEXCAN1_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[127].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);						/* ADC_0 control */
+	MC_ME.PCTL[126].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);						/* ADC_0 sequencer */
+	MC_ME.PCTL[SPC5_ETIMER0_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[SPC5_ETIMER1_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[SPC5_ETIMER2_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[SPC5_ETIMER3_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[244].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+
   /* Switches again to DRUN mode (current mode) in order to update the
      settings.*/
   if (SPCSetRunMode(SPC5_RUNMODE_DRUN) == CLOCK_FAILED) {]]></diff>
    </file>
    <file componentId="com.st.spc5.components.clock.spc570sxx_rla" version="1.1.0.20190603141636" path="component/lib/src/clock.c" user="false">
      <diff><![CDATA[--- components/spc570sxx_clock_component_rla/lib/src/clock.c
+++ components/spc570sxx_clock_component_rla/lib/src/clock.c
@@ -1,16 +1,19 @@
-/****************************************************************************
-*
-* Copyright Â© 2015-2019 STMicroelectronics - All Rights Reserved
-*
-* License terms: STMicroelectronics Proprietary in accordance with licensing
-* terms SLA0089 at www.st.com.
-* 
-* THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED, 
-* INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
-*
-* EVALUATION ONLY â€“ NOT FOR USE IN PRODUCTION
-*****************************************************************************/
+/*
+    SPC5 RLA - Copyright (C) 2015 STMicroelectronics
 
+    Licensed under the Apache License, Version 2.0 (the "License").
+    You may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+*/
+
 /**
  * @file    clock.c
  * @brief   SPC570Sxx clock subsystem source.
@@ -114,6 +117,11 @@
   SWT_0.CR.R = 0xFF000002UL;
 #endif
 
+#ifdef SPC5_SSCM_ERROR_INIT		/* modified by Felix for debugging */
+#undef SPC5_SSCM_ERROR_INIT
+#define SPC5_SSCM_ERROR_INIT                (SPC5_SSCM_ERROR_PAE)
+#endif
+
   /* SSCM initialization from configuration data.*/
   SSCM.ERROR.R = (uint16_t)SPC5_SSCM_ERROR_INIT;
 
@@ -129,13 +137,11 @@
     SPC5_CLOCK_FAILURE_HOOK();
   }
 
-#if (SPC5_XOSC_DISABLED == FALSE)
 #if (SPC5_OSC_BYPASS == TRUE)
   /* If the board is equipped with an oscillator instead of a crystal then the
      bypass must be activated.*/
   XOSC.CTL.B.OSCBYP = TRUE;
 #endif /* SPC5_OSC_BYPASS */
-#endif /* !SPC5_XOSC_DISABLED */
 
   /* Memory-mapped register definitions incompatible with MISRA rule. */
   /*lint -e10 -e40 -e63*/
@@ -160,7 +166,6 @@
   MC_CGM.AC3_SC.R   = SPC5_CGM_AC3_SC_BITS;
   /*lint +e10 +e40 +e63*/
 
-#if (SPC5_XOSC_DISABLED == FALSE)
   /* Enables the XOSC in order to check its functionality before proceeding
      with the initialization.*/
   MC_ME.DRUN_MC.R   = SPC5_ME_MC_SYSCLK_IRC | SPC5_ME_MC_IRCON |
@@ -169,7 +174,6 @@
   if (SPCSetRunMode(SPC5_RUNMODE_DRUN) == CLOCK_FAILED) {
     SPC5_CLOCK_FAILURE_HOOK();
   }
-#endif /* !SPC5_XOSC_DISABLED */
 
   /* PLLs initialization, the changes will have effect on mode switch.*/
   PLLDIG.PLL0CR.R   = 0U;
@@ -218,6 +222,17 @@
   MC_ME.LP_PC[6].R  = SPC5_ME_LP_PC6_BITS;
   MC_ME.LP_PC[7].R  = SPC5_ME_LP_PC7_BITS;
 
+  /* added by Felix */
+	MC_ME.PCTL[SPC5_FLEXCAN0_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[SPC5_FLEXCAN1_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[127].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);						/* ADC_0 control */
+	MC_ME.PCTL[126].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);						/* ADC_0 sequencer */
+	MC_ME.PCTL[SPC5_ETIMER0_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[SPC5_ETIMER1_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[SPC5_ETIMER2_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[SPC5_ETIMER3_PCTL].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+	MC_ME.PCTL[244].R = SPC5_ME_PCTL_RUN(2) | SPC5_ME_PCTL_LP(0);
+
   /* Switches again to DRUN mode (current mode) in order to update the
      settings.*/
   if (SPCSetRunMode(SPC5_RUNMODE_DRUN) == CLOCK_FAILED) {
@@ -236,7 +251,7 @@
  */
 void __early_init(void) {
 
-  spc_clock_init();
+ spc_clock_init();
 }
 
 /**
@@ -258,14 +273,14 @@
   MC_ME.MCTL.R = SPC5_ME_MCTL_MODE(mode) | SPC5_ME_MCTL_KEY_INV;
 
   /* Waits for the mode switch or an error condition.*/
-  while (MC_ME.IS.R == 0U) {
+  while (MC_ME.IS.R == 0U){
     ;
   }
   /* Check if no error during mode switch */
-  if (MC_ME.IS.B.I_MTC == 1U) {
+  if (MC_ME.IS.B.I_MTC == 1U){
     return CLOCK_SUCCESS;
-  } else {
-    return CLOCK_FAILED;
+  }else{
+	return CLOCK_FAILED;
   }
 }]]></diff>
    </file>
    <file componentId="com.st.spc5.components.clock.spc570sxx_rla" version="1.1.0.20190603141636" path="component/lib/include/clock.h" user="false">
      <diff><![CDATA[--- components/spc570sxx_clock_component_rla/lib/include/clock.h
+++ components/spc570sxx_clock_component_rla/lib/include/clock.h
@@ -845,22 +845,6 @@
 #define SPC5_CLOCK_FAILURE_HOOK()           irqSysHalt()
 #endif
 
-/**
- * @brief   XOSC disabled initialization.
- * @note    The default is XOSC enabled.
- */
-#if !defined(SPC5_XOSC_DISABLED) || defined(__DOXYGEN__)
-#define SPC5_XOSC_DISABLED                  FALSE
-#endif
-
-/**
- * @brief   XOSCON set at least in one run mode initialization.
- * @note    The default is XOSCON not set in all run modes.
- */
-#if !defined(SPC5_ME_MC_IS_XOSCON) || defined(__DOXYGEN__)
-#define SPC5_ME_MC_IS_XOSCON                FALSE
-#endif
-
 /*===========================================================================*/
 /* Derived constants and error checks.                                       */
 /*===========================================================================*/
@@ -1213,24 +1197,7 @@
 #if SPC5_CAN_CLK > SPC5_CAN_CLK_MAX
 #error "SPC5_CAN_CLK outside acceptable range (0...SPC5_CAN_CLK_MAX)"
 #endif
-
-/* Check on SPC5_PER_CLK.*/
-#if SPC5_PER_CLK > SPC5_PER_CLK_MAX
-#error "SPC5_PER_CLK outside acceptable range (0...SPC5_PER_CLK_MAX)"
-#endif
-
-/* Check XOSC is not used if it is disabled.*/
-#if (SPC5_XOSC_DISABLED == TRUE)
-#if ((SPC5_CGM_AC0_SC_BITS == SPC5_CGM_SC_XOSC)  || (SPC5_CGM_AC1_SC_BITS == SPC5_CGM_SC_XOSC)  || \
-     (SPC5_CGM_AC2_SC_BITS == SPC5_CGM_SC_XOSC)  || (SPC5_CGM_AC3_SC_BITS == SPC5_CGM_SC_XOSC))
-#error "XOSC cannot be selected as clock source if it is disabled."
-#endif
-
-#if(SPC5_ME_MC_IS_XOSCON == TRUE)
-#error "XOSCON cannot be set in one or more Run Modes if XOSC is disabled."
-#endif
-#endif
-
+ 
 /*===========================================================================*/
 /* Module data structures and types.                                         */
 /*===========================================================================*/]]></diff>
    </file>
    <file componentId="com.st.spc5.components.clock.spc570sxx_rla" version="1.1.0.20190712103448" path="component/lib/include/clock.h" user="false">
      <diff />
    </file>
    <file componentId="com.st.spc5.components.clock.spc570sxx_rla" version="1.1.0.20190712103448" path="component/lib/src/clock.c" user="false">
      <diff />
    </file>
  </files>
</SPC5-Patch>
